# 사용할 JDBC 드라이버 설정
#spring.datasource.hikari.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
# 기존의 드라이버 (임의로 되는지 확인 위해 이걸로 설정..?) 
spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver


# 실제 접속할 데이터베이스 주소
#spring.datasource.hikari.jdbc-url=jdbc:log4jdbc:mysql://localhost:3306/board?serverTimezone=UTC&characterEncoding=UTF-8&useUnicode=true
# 기존 주소 (임의로 이걸로 설정....?)
spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/board?serverTimezone=UTC&characterEncoding=UTF-8&useUnicode=true


spring.datasource.hikari.username=root
spring.datasource.hikari.password=asdf1234
spring.datasource.hikari.connection-test-query=SELECT 1

spring.mvc.hiddenmethod.filter.enabled=true

# 우리가 사용하는 마이바티스나, 여기서 사용하는 jpa는 ORM이라고 한다.
# ORM은 프로그래밍의 객체와 데이터베이스의 테이블 구조가 비슷하다는 것에서 시작
# ORM은 특정 언어에 종속된 형태가 아니라 객체와 관계형 데이터베이스를 매핑시킨다는 개념임
# 이러한 ORM 개념을 구현하기 위한 표준이 JPA임.

# JPA는 각 기능이 동작이 어떻게 되어야 한다는 것을 정의한 기술 명세이기 때문에 기능을 구현한 구현체가 필요함
# 이러한 기능을 구현한 제품이 프레임워크로써 하이버네이트, 이클립스링크 등이 있으며 이러한 JPA 구현체를 JPA 프로바이더라고함.


# mysql 사용한다는 뜻
spring.jpa.database=mysql 

# MySql의 사용 DB 엔진을 선택, jpa의 기본 DB 엔진 선택이 MyISAM로 되어 있기 때문에 InnoDB로 변경해야 함. InnoDB가 가장 최신 엔진임
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

#*********처음 개발할 땐 아래 값을 true로 주고나서 한 번 실행하면 반드시 아래 부분 false로 수정해야한다!!**********
# 데이터 베이스 생성과 같은 스크립트를 자동 실행
# 개발 시에는 true로 사용해야 하며, 실제 DB에서는 false를 사용해야 함. -> 테이블 동일한 것 있으면 삭제하고 새로 만들어버림. 그래서 실제는 꼭@@@!!!! false로 둘 것!!
spring.jpa.generate-ddl=false

# create(테이블 생성), create-drop(테이블 생성 및 사용 후 삭제), update(테이블이 존재하는 상태에서 entity가 변경이 있을 경우 수정), none(아무것도 하지 않음)
spring.jpa.hibernate.ddl-auto=none

# 
spring.jpa.show-sql=true

# 하이버네이트의 신규 ID 생성 여부 설정, mysql에서는 자동 증가 옵션이 있기 때문에 false 사용 (오라클은 자동증가가 없어서 이 부분 true로 해줌..)
# AUTO, TABLE, SEQUENCE 가 존재
spring.jpa.hibernate.use-new-id-generator-mappings=false

#======================================================================================
# JPA 장점
# 개발이 편함 (SQL 쿼리를 직접 작성하지 않아도 됨)
# 데이터베이스 독립적인 개발이 가능 (DB에 종속적이지 않음, JPA에 자동으로 쿼리를 생성)
# 유지보수가 쉬움 (마이바티스는 테이블 변경 시 관련 코드를 모두 수정해야 함)

# JPA 단점
# 학습곡선이 큼 (DB 튜닝이 어려움)
# 특정 DB의 기능을 사용할 수 없음
# 개개체 지향 설계가 필요함